"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("./Task");
var Build = (function () {
    function Build(workerId) {
        this._warnings = [];
        this._errors = [];
        this.tasks = new Map();
        this._workerId = workerId;
    }
    Object.defineProperty(Build.prototype, "workerId", {
        get: function () {
            return this._workerId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Build.prototype, "errors", {
        get: function () {
            return this._errors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Build.prototype, "warnings", {
        get: function () {
            return this._warnings;
        },
        enumerable: true,
        configurable: true
    });
    Build.prototype.error = function (msg) {
        this._errors.push(msg);
    };
    Build.prototype.warning = function (msg) {
        this._warnings.push(msg);
    };
    Build.prototype.createTask = function (id) {
        this.tasks.set(id, new Task_1.Task(id));
    };
    Build.prototype.failed = function () {
        var e_1, _a;
        try {
            for (var _b = __values(this.tasks.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var task = _c.value;
                if (task.status === Task_1.Status.Failed) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    Build.prototype.isFinished = function () {
        var e_2, _a;
        try {
            for (var _b = __values(this.tasks.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var task = _c.value;
                if (!task.isFinished()) {
                    return false;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return true;
    };
    return Build;
}());
exports.Build = Build;
//# sourceMappingURL=Build.js.map