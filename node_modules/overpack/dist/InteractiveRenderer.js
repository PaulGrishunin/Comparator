"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var perf_hooks_1 = require("perf_hooks");
var StatusGraphics = {
    NotStarted: {
        style: chalk_1.default.bold.gray,
        frames: ['›'],
    },
    Running: {
        style: chalk_1.default.bold.blueBright,
        frames: ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'],
        interval: 50,
    },
    Succeeded: {
        style: chalk_1.default.bold.green,
        frames: ['✔'],
    },
    Failed: {
        style: chalk_1.default.bold.red,
        frames: ['✖'],
    },
    Skipped: {
        style: chalk_1.default.bold.yellow,
        frames: ['⎋'],
    },
};
function renderBuild(build) {
    var e_1, _a;
    var renderedTasks = [];
    try {
        for (var _b = __values(build.tasks.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var task = _c.value;
            renderedTasks.push(renderTask(task));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return chalk_1.default.bold.white(build.workerId) + "\n" + renderedTasks.join('\n');
}
exports.renderBuild = renderBuild;
function renderTask(task) {
    var graphic = StatusGraphics[task.status];
    var curFrame = graphic.interval
        ? Math.floor((perf_hooks_1.performance.now() - task.startTime) / graphic.interval) % graphic.frames.length
        : 0;
    return "  " + graphic.style(graphic.frames[curFrame]) + " " + task.id;
}
//# sourceMappingURL=InteractiveRenderer.js.map