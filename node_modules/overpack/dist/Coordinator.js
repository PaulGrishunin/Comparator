"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var NodeIPC = require("node-ipc");
var logUpdate = require("log-update");
var os = require("os");
var shortid = require("shortid");
var MessageEmitter_1 = require("./MessageEmitter");
var Build_1 = require("./Build");
var jest_worker_1 = require("jest-worker");
var Task_1 = require("./Task");
var chalk_1 = require("chalk");
var Configuration_1 = require("./Configuration");
var InteractiveRenderer_1 = require("./InteractiveRenderer");
var Coordinator = (function () {
    function Coordinator(configPath, interactive, watch, env) {
        this.runningBuilds = new Map();
        this.ipc = new NodeIPC.IPC();
        this.configPath = configPath;
        this.interactive = interactive;
        this.watch = watch;
        this.env = env;
        this.ipc.config.silent = true;
        this.ipc.config.id = "overpack-" + shortid.generate();
    }
    Coordinator.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var webpackConfigs, cpuCount, numWorkers, pool, runningWorkers, err_1, code;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.registerRender();
                        this.ipc.serve();
                        this.initIpcServer();
                        this.ipc.server.start();
                        webpackConfigs = Configuration_1.loadConfig(this.configPath, this.env);
                        cpuCount = os.cpus().length;
                        numWorkers = Math.min(cpuCount, webpackConfigs.length);
                        pool = new jest_worker_1.default(require.resolve('./WebpackWorker'), {
                            numWorkers: numWorkers,
                            forkOptions: {
                                silent: true,
                            },
                        });
                        runningWorkers = webpackConfigs.map(function (config, index) {
                            var webpackWorkerOptions = {
                                ipcChannel: _this.ipc.config.id,
                                configPath: _this.configPath,
                                configIndex: index,
                                watch: _this.watch,
                                env: _this.env,
                            };
                            return pool.run(webpackWorkerOptions);
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, Promise.all(runningWorkers)];
                    case 2:
                        _a.sent();
                        return [3, 4];
                    case 3:
                        err_1 = _a.sent();
                        console.error(err_1);
                        return [3, 4];
                    case 4:
                        code = this.stop();
                        return [2, Promise.resolve(code)];
                }
            });
        });
    };
    Coordinator.prototype.initIpcServer = function () {
        var _this = this;
        var server = this.ipc.server;
        server.on(MessageEmitter_1.Action.TriggerBuild, function (msg) {
            _this.runningBuilds.set(msg.workerId, new Build_1.Build(msg.workerId));
        });
        server.on(MessageEmitter_1.Action.Error, function (msg) {
            var build = _this.runningBuilds.get(msg.workerId);
            build && build.error(msg.error);
        });
        server.on(MessageEmitter_1.Action.Warning, function (msg) {
            var build = _this.runningBuilds.get(msg.workerId);
            build && build.warning(msg.warning);
        });
        server.on(MessageEmitter_1.Action.CreateTask, function (msg) {
            var build = _this.runningBuilds.get(msg.workerId);
            build && build.tasks.set(msg.taskId, new Task_1.Task(msg.taskId));
        });
        server.on(MessageEmitter_1.Action.StartTask, function (msg) {
            var task = _this.findTask(msg.workerId, msg.taskId);
            task && task.start();
        });
        server.on(MessageEmitter_1.Action.SucceedTask, function (msg) {
            var task = _this.findTask(msg.workerId, msg.taskId);
            task && task.succeed();
            _this.handleFinishedBuilds();
        });
        server.on(MessageEmitter_1.Action.FailTask, function (msg) {
            var task = _this.findTask(msg.workerId, msg.taskId);
            task && task.fail();
            _this.handleFinishedBuilds();
        });
        server.on(MessageEmitter_1.Action.SkipTask, function (msg) {
            var task = _this.findTask(msg.workerId, msg.taskId);
            task && task.skip();
            _this.handleFinishedBuilds();
        });
    };
    Coordinator.prototype.registerRender = function () {
        var _this = this;
        this.intervalId = setInterval(function () {
            var e_1, _a;
            var outputs = [];
            try {
                for (var _b = __values(_this.runningBuilds.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var build = _c.value;
                    outputs.push(InteractiveRenderer_1.renderBuild(build));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (outputs.length > 0) {
                logUpdate(outputs.join('\n\n'));
            }
            else {
                logUpdate.clear();
            }
        }, 50);
    };
    Coordinator.prototype.handleFinishedBuilds = function () {
        var e_2, _a;
        var stopped = false;
        try {
            for (var _b = __values(this.runningBuilds.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var build = _c.value;
                if (build.isFinished()) {
                    if (!stopped) {
                        this.intervalId && clearInterval(this.intervalId);
                        this.intervalId = undefined;
                        stopped = true;
                        logUpdate.clear();
                        logUpdate.done();
                    }
                    var errorCount = build.errors.length.toString();
                    var warningCount = build.warnings.length.toString();
                    console.log(InteractiveRenderer_1.renderBuild(build));
                    console.log("Finished " + build.workerId + " with " + errorCount + " errors and " + warningCount + " warnings");
                    build.errors.forEach(function (error) { return console.log(chalk_1.default.red(error)); });
                    build.warnings.forEach(function (warning) { return console.log(chalk_1.default.yellow(warning)); });
                    console.log();
                    this.runningBuilds.delete(build.workerId);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (!this.intervalId) {
            this.registerRender();
        }
    };
    Coordinator.prototype.findTask = function (workerId, taskId) {
        var build = this.runningBuilds.get(workerId);
        if (build) {
            return build.tasks.get(taskId);
        }
        return null;
    };
    Coordinator.prototype.stop = function () {
        var e_3, _a;
        this.ipc.server.stop();
        try {
            for (var _b = __values(this.runningBuilds.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var build = _c.value;
                if (build.failed()) {
                    return 1;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return 0;
    };
    return Coordinator;
}());
exports.Coordinator = Coordinator;
//# sourceMappingURL=Coordinator.js.map