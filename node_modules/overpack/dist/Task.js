"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var perf_hooks_1 = require("perf_hooks");
var Status;
(function (Status) {
    Status["NotStarted"] = "NotStarted";
    Status["Running"] = "Running";
    Status["Succeeded"] = "Succeeded";
    Status["Failed"] = "Failed";
    Status["Skipped"] = "Skipped";
})(Status = exports.Status || (exports.Status = {}));
var Task = (function () {
    function Task(id) {
        this._startTime = undefined;
        this._finishTime = undefined;
        this._status = Status.NotStarted;
        this._id = id;
    }
    Object.defineProperty(Task.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "startTime", {
        get: function () {
            return this._startTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "finishTime", {
        get: function () {
            return this._finishTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "status", {
        get: function () {
            return this._status;
        },
        enumerable: true,
        configurable: true
    });
    Task.prototype.start = function () {
        this._status = Status.Running;
        this._startTime = perf_hooks_1.performance.now();
    };
    Task.prototype.succeed = function () {
        this._status = Status.Succeeded;
        this._finishTime = perf_hooks_1.performance.now();
    };
    Task.prototype.fail = function () {
        this._status = Status.Failed;
        this._finishTime = perf_hooks_1.performance.now();
    };
    Task.prototype.skip = function () {
        this._status = Status.Skipped;
        this._startTime = undefined;
        this._finishTime = undefined;
    };
    Task.prototype.isFinished = function () {
        return this._status === Status.Succeeded || this._status === Status.Failed || this._status === Status.Skipped;
    };
    return Task;
}());
exports.Task = Task;
//# sourceMappingURL=Task.js.map